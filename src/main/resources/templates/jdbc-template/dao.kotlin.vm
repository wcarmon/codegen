package $request.packageName.value

import ${entity.pkg.value}.${entity.name.upperCamel}
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.jdbc.core.PreparedStatementSetter
import org.springframework.jdbc.core.RowMapper
#if ($request.hasContextClass)
import $request.jvmContextClass
#end
#foreach ($importable in $entity.kotlinImportsForFields)
import $importable
#end
#foreach ($importable in $request.extraJVMImports)
import $importable
#end
#if ($entity.requiresObjectWriter)
import com.fasterxml.jackson.databind.ObjectWriter
#end
import java.sql.Types

##TODO: confirm I need this
import java.time.*


/**
 * DAO implementation for [${entity.pkg.value}.${entity.name.upperCamel}].
 * Uses [org.springframework.jdbc.core.JdbcTemplate] to execute queries.
 * Uses [java.sql.PreparedStatement]
 *
 * See https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html
 * Threadsafe & Reusable after construction
 */
@Suppress("MagicNumber", "TooManyFunctions") // column & placeholder numbers
class ${entity.name.upperCamel}DAOImpl(
  private val jdbcTemplate: JdbcTemplate,

  #if ($entity.requiresObjectWriter)
  /** To serialize collection fields */
  private val objectWriter: ObjectWriter,
  #end

  private val rowMapper: RowMapper<${entity.name.upperCamel}>,

): ${entity.name.upperCamel}DAO {

#if ($entity.hasPrimaryKeyFields)
  override fun delete(#if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end ${entity.kotlinMethodArgsForPKFields(false)}) {
    //TODO: kotlin preconditions on PK fields (see FieldValidation)

    jdbcTemplate.update(DELETE__${entity.name.upperSnake}) { ps ->
        $entity.kotlinPreparedStatementSetterStatementsForPK
    }
  }

  override fun exists(#if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end ${entity.kotlinMethodArgsForPKFields(false)}): Boolean {
    //TODO: kotlin preconditions on PK fields (see FieldValidation)

    return 1 == jdbcTemplate.queryForObject(
      ROW_EXISTS__${entity.name.upperSnake},
      Int::class.java,
      $entity.jdbcSerializedPKFields)
  }

  override fun findById(#if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end ${entity.kotlinMethodArgsForPKFields(false)}): ${entity.name.upperCamel}? {
    //TODO: kotlin preconditions on PK fields (see FieldValidation)

    val results =
      jdbcTemplate.query(
        SELECT_BY_PK__${entity.name.upperSnake},
        PreparedStatementSetter { ps ->
          $entity.kotlinPreparedStatementSetterStatementsForPK
        },
        rowMapper)

    if (results.isEmpty()) {
      return null
    }

    if (results.size > 1) {
      //TODO: include PK arg(s)
      throw IllegalStateException("Multiple rows match the PK: context=#[[$]]#context, results=#[[$]]#results")
    }

    return results[0]
  }
#end

  override fun create(#if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end entity: ${entity.name.upperCamel}) {

    val affectedRowCount = jdbcTemplate.update(
      INSERT__${entity.name.upperSnake},
    ) { ps ->
        $entity.kotlinInsertPreparedStatementSetterStatements
      }

    check(affectedRowCount == 1){ "1-row should have been inserted for entity=#[[$]]#entity" }
  }

  override fun list(#if ($request.hasContextClass)context: $request.unqualifiedContextClass#end): List<${entity.name.upperCamel}> {
    return jdbcTemplate.query(
      SELECT_ALL__${entity.name.upperSnake},
      rowMapper
    )
  }

  override fun update(#if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end entity: ${entity.name.upperCamel}) {

    jdbcTemplate.update(
      UPDATE__${entity.name.upperSnake}
    ) { ps ->
        $entity.kotlinUpdatePreparedStatementSetterStatements
    }
  }

  override fun upsert(#if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end entity: ${entity.name.upperCamel}) {
    TODO("finish this method")
  }

  // -- Patch methods
  #foreach( $field in $entity.nonPrimaryKeyFields )
    override fun set${field.name.upperCamel}(
      #if ($request.hasContextClass)context: $request.unqualifiedContextClass,#end
      ${entity.kotlinMethodArgsForPKFields(false)},
      ${field.name.lowerCamel}: ${field.unqualifiedKotlinType}) {

      //TODO: '${field.name.lowerCamel}' field validation here (since not part of the POJO validation)

      jdbcTemplate.update(
        PATCH__${entity.name.upperSnake}__${field.name.upperSnake}
      ) { ps ->
        $entity.kotlinUpdateFieldPreparedStatementSetterStatements($field)
      }
    }

  #end
}
