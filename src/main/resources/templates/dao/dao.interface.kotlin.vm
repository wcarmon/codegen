package $request.packageName.value

#if ($request.hasContextClass)
import $request.jvmContextClass
#end
#foreach ($importable in $request.extraJVMImports)
import $importable
#end
#foreach ($importable in $entity.javaImportsForFields)
import $importable
#end

import java.time.*


/**
 * DAO Contract for [${entity.pkg.value}.${entity.name.upperCamel}]
 * PK field count: ${entity.primaryKeyFields.size()}
 * Field count: ${entity.fields.size()}
 *
 * Implementations must be ThreadSafe
 * See: $request.prettyTemplateName
 */
@Suppress("TooManyFunctions")
interface ${entity.name.upperCamel}DAO {

#if ($entity.hasPrimaryKeyFields)
 /**
  * Delete at-most-one existing {@link ${entity.pkg.value}.${entity.name.upperCamel}} instance
  *
  * NOOP if no matching entity exists
  *
  * @param TODO
  */
  ##TODO: Add @param to javadoc for context (dynamic)
  fun delete(#if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end ${entity.kotlinMethodArgsForPKFields(false)})

  /**
  * @param TODO
  * @return true when {@link ${entity.pkg.value}.${entity.name.upperCamel}} exists with matching PK
  */
  ##TODO: Add @param to kotlindoc for context (dynamic)
  fun exists(#if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end ${entity.kotlinMethodArgsForPKFields(false)}): Boolean

  /**
  * @param TODO
  * @return one {@link ${entity.pkg.value}.${entity.name.upperCamel}} instance (matching PKs) or null
  */
  ##TODO: Add @param to kotlindoc for context (dynamic)
  fun findById( #if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end ${entity.kotlinMethodArgsForPKFields(false)}): ${entity.name.upperCamel}?
#end

  /**
  * Create at-most-one {@link ${entity.pkg.value}.${entity.name.upperCamel}} instance
  */
  fun create(#if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end entity: ${entity.name.upperCamel})

  /**
  * @return all {@link ${entity.pkg.value}.${entity.name.upperCamel}} entities or empty List (never null)
  */
##TODO: Add @param to kotlindoc for context (dynamic)
  fun list(#if ($request.hasContextClass) context: $request.unqualifiedContextClass#end): List<${entity.name.upperCamel}>

  /**
  * Update all (non-PK) fields on one {@link ${entity.pkg.value}.${entity.name.upperCamel}} instance
  * (${entity.nonPrimaryKeyFields.size()} non-PK fields)
  */
##TODO: Add @param to kotlindoc for context (dynamic)
  fun update(#if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end entity: ${entity.name.upperCamel})

  /**
  * Upsert/Put {@link ${entity.pkg.value}.${entity.name.upperCamel}}
  *
  * Update if entity exists, Create if entity does not exist
  *
  * Same concept as {@link java.util.Map#put}
  *
  * @param entity to update or create
  */
##TODO: Add @param to kotlindoc for context (dynamic)
  fun upsert(#if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end entity: ${entity.name.upperCamel})

#foreach( $field in $entity.nonPrimaryKeyFields )
  /**
  * Patch/Set
  *
  * Set one field: {@link ${entity.pkg.value}.${entity.name.upperCamel}#${field.name.lowerCamel}}
  *
  * @param ${field.name.lowerCamel} - replacement for existing value
  */
  ##TODO: Add @param to kotlindoc for context (dynamic)
  fun set${field.name.upperCamel}(#if ($request.hasContextClass) context: $request.unqualifiedContextClass,#end
    ${entity.kotlinMethodArgsForPKFields(false)},
    ${field.name.lowerCamel}: ${field.unqualifiedKotlinType})

#end
  }
