package $request.packageName.value;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.time.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.StringJoiner;
import java.util.TreeSet;

/**
 * Immutable POJO
 * <p>
 * See $request.prettyTemplateName
 */
##TODO: include class documentation when present
@JsonPropertyOrder(alphabetic = true)
@JsonDeserialize(builder = ${entity.name.upperCamel}.${entity.name.upperCamel}Builder.class)
public final class ${entity.name.upperCamel} {

  #foreach( $field in $entity.sortedFields )
##
  /**
    ##TODO: include field documentation when present (move logic to field class)
    #if($field.primaryKeyField)
     * Primary key
    #end
  */
  private final $field.javaType ${field.name.lowerCamel};
  #end

  private ${entity.name.upperCamel}( ${entity.name.upperCamel}Builder builder ) {
    //TODO: Validation here

    #foreach( $field in $entity.sortedFields )
      #if($field.collection)
      this.${field.name.lowerCamel} = ${field.unmodifiableJavaCollectionMethod}(builder.${field.name.lowerCamel});
      #else
      this.${field.name.lowerCamel} = builder.${field.name.lowerCamel};
      #end
    #end
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    ${entity.name.upperCamel} that = (${entity.name.upperCamel}) o;
    #foreach ($field in $entity.sortedFields)
      #if ($foreach.first)
      return $field.javaEqualityExpression("this", "that")
      #elseif ($foreach.last)
        && $field.javaEqualityExpression("this", "that");
      ##TODO: handle arrays:  Arrays.equals
      #else
        && $field.javaEqualityExpression("this", "that")
      #end
    #end
  }

  @Override
  public int hashCode() {
    return Objects.hash(
    #foreach( $field in $entity.sortedFields )
      $field.name.lowerCamel#if ($foreach.last));#else,#end
    #end
  }

  #foreach( $field in $entity.sortedFields )
    public $field.javaType get${field.name.upperCamel}() {
      return this.$field.name.lowerCamel;
    }

  #end

  @Override
  public String toString() {
    return new StringJoiner(", ", ${entity.name.upperCamel}.class.getSimpleName() + "[", "]")
    #foreach( $field in $entity.sortedFields )
      #if ($field.shouldQuoteInString)
      .add("$field.name.lowerCamel='" + $field.name.lowerCamel + "'")
      #else
      .add("$field.name.lowerCamel=" + $field.name.lowerCamel)
      #end
    #end
    .toString();
  }

  public static ${entity.name.upperCamel}Builder builder() {
    return new ${entity.name.upperCamel}Builder();
  }

  @JsonPOJOBuilder(withPrefix = "", buildMethodName = "build")
  public static class ${entity.name.upperCamel}Builder {
##TODO: set default values on fields here
    #foreach( $field in $entity.sortedFields )
    private $field.javaType ${field.name.lowerCamel};
    #end

    ${entity.name.upperCamel}Builder() {
    }

    #foreach( $field in $entity.sortedFields )
    public ${entity.name.upperCamel}Builder ${field.name.lowerCamel}(${field.javaType} value) {
      this.$field.name.lowerCamel = value;
      return this;
    }

      #if($field.collection)

        public ${entity.name.upperCamel}Builder ${field.name.lowerCamel}(${field.type.typeParameters[0]} value) {
          if (this.$field.name.lowerCamel == null) {
            this.$field.name.lowerCamel = new $field.newJavaCollectionExpression();
          }

          this.${field.name.lowerCamel}.add(value);
          return this;
        }
      #end
    #end

    public ${entity.name.upperCamel} build() {
      return new ${entity.name.upperCamel}(this);
    }
  }
}
