package $request.packageName.value

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.time.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.StringJoiner;
import java.util.TreeSet;

/**
 * Generated file
 * Template: $request.prettyTemplateName
 *
 * Immutable POJO pattern
 */
##TODO: include class documentation when present
data class ${entity.name.upperCamel}(
  #foreach( $field in $entity.primaryKeyFields )
      /** PK field */
      val $field.name.lowerCamel: $field.kotlinType,

  #end
  // -- Other Fields
  #foreach( $field in $entity.nonPrimaryKeyFields )
    #if ($field.hasDefault)
        val $field.name.lowerCamel: $field.kotlinType = $field.defaultValue,
    #else
        val $field.name.lowerCamel: $field.kotlinType,
    #end
  #end
) {

  init {
    #foreach($field in $entity.fieldsWithValidation)
        #if($field.validation.maxSize)

            ##TODO: allow collections to use .size
        require(${field.name.lowerCamel}.length <= $field.validation.maxSize) {
            ##TODO: Smart trim with ellipse here
            "'$field.name.lowerCamel' is too long: maxSize=$field.validation.maxSize, value=$${field.name.lowerCamel}"
        }
        #end
##
        #if($field.validation.minSize)

            ##TODO: allow collections to use .size
        require(${field.name.lowerCamel}.length <= $field.validation.minSize) {
            ##TODO: Smart trim with ellipse here
            "'$field.name.lowerCamel' is too short: minSize=$field.validation.minSize, value=$${field.name.lowerCamel}"
        }
        #end
##
        #if($field.validation.requireNotBlank)

        require(${field.name.lowerCamel}.isNotBlank()) {
            "'$field.name.lowerCamel' is required and blank"
        }
        #end
##
        #if($field.validation.requireTrimmed)

        require(${field.name.lowerCamel}.trim() == ${field.name.lowerCamel}) {
            "'$field.name.lowerCamel' must be trimmed: value=$${field.name.lowerCamel}"
        }
        #end
##
        #if($field.validation.maxValue)

            //TODO: add maxValue validation for $field
        #end
##
        #if($field.validation.minValue)

            //TODO: add minValue validation for $field
        #end
##
        #if($field.validation.fileConstraint)

            //TODO: add fileConstraint validation for $field
        #end
##
        #if($field.validation.after)

            //TODO: add after validation for $field
        #end
##
        #if($field.validation.before)

            //TODO: add before validation for $field
        #end
##
        #if($field.validation.requireLowerCase)

            //TODO: add requireLowerCase validation for $field
        #end
##
        #if($field.validation.requireUpperCase)

            //TODO: add requireUpperCase validation for $field
        #end
##
        #if($field.validation.requireMatchesRegex)

            //TODO: add requireMatchesRegex validation for $field
        #end
    #end
  }
}
